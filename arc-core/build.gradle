sourceSets.main.java.srcDirs = ["src"]
sourceSets.test.java.srcDirs = ["test"]
sourceSets.test.resources.srcDirs = ["test/resources"]

//set to true when generating code, make sure to clean first
def useParameters = false

import com.badlogic.gdx.jnigen.*

dependencies{
    testImplementation libraries.junit
    testImplementation aproj(":natives:natives-desktop")
}

if(useParameters){
    compileJava{
        options.compilerArgs << '-parameters'
    }
}

test{
    testLogging{
        exceptionFormat = 'full'
    }
}

buildscript{
    dependencies{
        classpath "com.github.libgdx:gdx-jnigen:975fc696ee691301da870dcb67bc640d4ee14cf7"
    }
}

task deleteJniFolder(type: Delete) {
    delete "jni"
    delete "docs"
}

clean.dependsOn(deleteJniFolder)

task natives {
     doLast{

        def root = "$project.rootDir/arc-core"
        def jnidir = "$root/jni"
        def libdir = "$root/libs"

        new NativeCodeGenerator().generate("$root/src", "$root/build/classes/java/main", jnidir, null, null)

        copy{
            include "**"
            from "csrc/"
            into "jni/"
        }        

        //download latest version of stb_image directly into jni folder
        "curl -o $jnidir/stb_image.h https://raw.githubusercontent.com/nothings/stb/master/stb_image.h".execute().waitFor()
        
        def isAarch64 = "gcc -dumpmachine".execute().text.contains("aarch64")
       
        BuildTarget target = BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Linux, isAarch64, true)


	    target.cFlags = "-c -march=armv8-a" + (isAarch64 ? "" : " -mfpu=neon-fp-armv8") + " -O2 -fno-stack-protector -D_FORTIFY_SOURCE=0 -fpic"                
        target.cppFlags = "-c -march=armv8-a" + (isAarch64 ? "" : " -mfpu=neon-fp-armv8") + " -O2 -fno-stack-protector -D_FORTIFY_SOURCE=0 -fpic"
        target.linkerFlags = "-shared -O2 -fno-stack-protector -D_FORTIFY_SOURCE=0"        

        new AntScriptGenerator().generate(new BuildConfig("arc", "$root/build", "libs/", jnidir), [target] as BuildTarget[])

        //set correct memcpy wrap contents...
        file("$jnidir/memcpy_wrap.c").text = file("$rootDir/natives/memcpy_wrap.c").text
        //wrap functions with right version of glibc
        //file("$jnidir/build-linux64.xml").text = file("$jnidir/build-linux64.xml").text.replace("-Wl,-wrap,memcpy", "-Wl,-wrap,memcpy,-wrap,pow")

        
	    String buildFileName = "build-" + target.os.toString().toLowerCase() + (target.isARM ? "arm" : "") +  (target.is64Bit ? "64" : "32") + ".xml"            
        BuildExecutor.executeAnt("$jnidir/" + buildFileName, "-Dhas-compiler=true -Drelease=true clean postcompile")
        

        new File(libdir).eachFileRecurse{ f ->            
            if(!f.isDirectory()) file("../natives/natives-desktop/libs/$f.name").bytes = f.bytes
        }

        //cleanup
        delete{ delete "libs" }
        delete{ delete "obj" }
        delete{ delete "out" }
        delete{ delete "jni" }

        //delete extra garbage, not sure why it even exists
        delete{
            delete "../libs"
        }
    }
}

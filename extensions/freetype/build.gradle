import com.badlogic.gdx.jnigen.*

buildscript{
    dependencies{
        classpath "com.github.libgdx:gdx-jnigen:975fc696ee691301da870dcb67bc640d4ee14cf7"
    }
}

task deleteJniFolder(type: Delete) {
    delete "jni"
    delete "docs"
}

clean.dependsOn(deleteJniFolder)

task freetypeNatives(dependsOn: [classes, deleteJniFolder]){
    doLast{
        def root = "$project.rootDir/extensions/freetype"
        def jnidir = "$root/jni"
        def libdir = "$root/libs"

        String fdir = "freetype-2.10.0"

        String[] headers = ["$fdir/include"]
        String[] sources = [
            //BASE
            "$fdir/src/base/ftsystem.c", "$fdir/src/base/ftinit.c", "$fdir/src/base/ftdebug.c",
            "$fdir/src/base/ftbase.c", "$fdir/src/base/ftbbox.c", "$fdir/src/base/ftglyph.c",
            "$fdir/src/base/ftbdf.c", "$fdir/src/base/ftbitmap.c", "$fdir/src/base/ftcid.c",
            "$fdir/src/base/ftfstype.c", "$fdir/src/base/ftgasp.c", "$fdir/src/base/ftgxval.c",
            "$fdir/src/base/ftmm.c", "$fdir/src/base/ftotval.c", "$fdir/src/base/ftpatent.c",
            "$fdir/src/base/ftpfr.c", "$fdir/src/base/ftstroke.c", "$fdir/src/base/ftsynth.c",
            "$fdir/src/base/fttype1.c", "$fdir/src/base/ftwinfnt.c", "$fdir/src/base/ftxf86.c",

            //DRIVERS
            "$fdir/src/bdf/bdf.c", "$fdir/src/cff/cff.c", "$fdir/src/cid/type1cid.c",
            "$fdir/src/pcf/pcf.c", "$fdir/src/pfr/pfr.c", "$fdir/src/sfnt/sfnt.c",
            "$fdir/src/truetype/truetype.c", "$fdir/src/type1/type1.c", "$fdir/src/type42/type42.c",
            "$fdir/src/winfonts/winfnt.c",

            //RASTERIZERS
            "$fdir/src/raster/raster.c", "$fdir/src/smooth/smooth.c",

            //AUX
            "$fdir/src/autofit/autofit.c", "$fdir/src/cache/ftcache.c", "$fdir/src/gzip/ftgzip.c",
            "$fdir/src/lzw/ftlzw.c", "$fdir/src/bzip2/ftbzip2.c", "$fdir/src/gxvalid/gxvalid.c",
            "$fdir/src/otvalid/otvalid.c", "$fdir/src/psaux/psaux.c", "$fdir/src/pshinter/pshinter.c",
            "$fdir/src/psnames/psnames.c"
        ]

        //copy files manually because javah and/or jnigen is braindead
        copy{
            from "$rootDir/arc-core/build/classes/java/main"
            into "$root/build/classes/java/main"
            include "**"
        }

        new NativeCodeGenerator().generate("$root/src", "$root/build/classes/java/main", jnidir, null, null)

        //download freetype
        def script = "wget -c https://download.savannah.gnu.org/releases/freetype/freetype-2.10.0.tar.bz2 -O - | tar -jx -C $jnidir"
        def scriptFile = new File("$buildDir/getfreetype")
        scriptFile.text = script
        "bash $scriptFile.absolutePath".execute().waitFor()

        def isAarch64 = "gcc -dumpmachine".execute().text.contains("aarch64")
        BuildTarget target = BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Linux, isAarch64, true)

        target.headerDirs = headers
        target.cIncludes = sources

	    target.cFlags = "-c -march=armv8-a" + (isAarch64 ? "" : " -mfpu=neon-fp-armv8") + " -O2 -fno-stack-protector -D_FORTIFY_SOURCE=0 -fpic"                
        target.cppFlags = "-c -march=armv8-a" + (isAarch64 ? "" : " -mfpu=neon-fp-armv8") + " -O2 -fno-stack-protector -D_FORTIFY_SOURCE=0 -fpic"
        target.linkerFlags = "-shared -O2 -fno-stack-protector -D_FORTIFY_SOURCE=0"      

        target.cFlags += " -DFT2_BUILD_LIBRARY"  
        target.cppFlags += " -DFT2_BUILD_LIBRARY"  
        
        def matches = { String path, List<String> pattern ->
            return pattern.find{ path.contains(it) } != null
        }

        new AntScriptGenerator().generate(new BuildConfig("arc-freetype", "$root/build", "libs/", jnidir), [target] as BuildTarget[])

        //overwrite incorrect application mkfile
        // new File("$jnidir/Application.mk").text = "APP_ABI := all\nAPP_PLATFORM := android-16"

        
        String buildFileName = "build-" + target.os.toString().toLowerCase() + "arm" + (target.is64Bit ? "64" : "32") + ".xml"
       	BuildExecutor.executeAnt("$jnidir/" + buildFileName, "-Dhas-compiler=true -Drelease=true clean postcompile")
        

        new File(libdir).eachFileRecurse{ file ->
            if(!file.path.contains("ios") && !file.path.contains("mac")){
                "strip ${file.absolutePath}".execute().waitFor()
            }
        }

        new File(libdir).eachFileRecurse{ f ->
            if(!f.isDirectory()){
                file("../../natives/natives-freetype-desktop/libs").mkdirs()
                file("../../natives/natives-freetype-desktop/libs/$f.name").bytes = f.bytes
            }
        }

        //cleanup
        delete{ delete "libs" }
        delete{ delete "obj" }
        delete{ delete "out" }
        delete{ delete "jni" }

        //delete extra garbage, not sure why it even exists
        delete{
            delete "../../libs"
        }
    }
}


